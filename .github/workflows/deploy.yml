name: Deploy Swim OCR App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr libtesseract-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -c "import app.main; print('✅ App imports successfully')"
        python -c "import cv2, pytesseract, fastapi; print('✅ All dependencies available')"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Check if rebuild is needed
      id: check_rebuild
      run: |
        if echo "${{ github.event.head_commit.message }}" | grep -q "(rebuild)"; then
          echo "rebuild=true" >> $GITHUB_OUTPUT
          echo "🔨 Rebuild mode detected"
        else
          echo "rebuild=false" >> $GITHUB_OUTPUT
          echo "⚡ Fast deploy mode"
        fi

    - name: Full server setup (rebuild only)
      if: steps.check_rebuild.outputs.rebuild == 'true'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          echo "🔨 Running full rebuild setup..."

          # Install system packages
          sudo apt update
          sudo apt install -y tesseract-ocr libtesseract-dev python3-venv nginx libgl1 libglib2.0-0

          # Create app directory
          sudo mkdir -p /opt/swim-ocr
          sudo chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} /opt/swim-ocr

          # Create systemd service
          sudo tee /etc/systemd/system/swim-ocr.service > /dev/null <<'EOF'
          [Unit]
          Description=Swim OCR API
          After=network.target

          [Service]
          User=${{ secrets.DEPLOY_USER }}
          WorkingDirectory=/opt/swim-ocr
          Environment="PATH=/opt/swim-ocr/.venv/bin"
          ExecStart=/opt/swim-ocr/.venv/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000
          Restart=on-failure
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          EOF

          echo "✅ System packages and service configured"
          echo "⚠️  Note: Nginx config not modified (manage manually)"
    
    - name: Sync files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        source: "app/,static/,requirements.txt"
        target: "/opt/swim-ocr/"
        strip_components: 0
        overwrite: true
    
    - name: Install dependencies and restart service
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /opt/swim-ocr

          # Create/update virtual environment
          python3 -m venv .venv
          source .venv/bin/activate

          # Install Python dependencies
          pip install --upgrade pip
          pip install -r requirements.txt

          # Reload systemd and restart service
          sudo systemctl daemon-reload
          sudo systemctl enable swim-ocr
          sudo systemctl restart swim-ocr

          # Check service status
          sudo systemctl status swim-ocr --no-pager -l

          echo ""
          echo "🎉 Deployment complete!"
          echo "📱 App: https://xutopia.site/swim/"
          echo "🔍 Health: https://xutopia.site/healthz"
          echo "📊 JSON Viewer: https://xutopia.site/json/"
